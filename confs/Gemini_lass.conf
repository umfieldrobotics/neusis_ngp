conf {
    dataset =  Gemini_lass  
    image_setkeyname = "images" 
    expID =   Gemini_lass # change this to a unique name for each experiment 
    timef = False
    filter_th = 0
    use_manual_bound = True
}

sensor {
    r_min = 0 # min range of the sonar
    r_max = 31 # max range of the sonar
    phi_min = -55 # min elevation angle in degrees
    phi_max = -5 # max elevation angle in degrees
    vfov = 50 # vertical field of view in degrees
    hfov = 120 # horizontal field of view in degrees
}


train {
    learning_rate = 5e-2
    learning_rate_alpha = 0.03 # for linear mode:  (1-0.01)**100 ~ 0.37; (1-0.02)**100 ~ 0.13; (1-0.03)**100 ~ 0.05
    learning_rate_decay_mode="linear" # "cos"
    end_iter = 60000 # how many steps to train for
    start_iter = 0 

    warm_up_end = 1000 
    anneal_end = 10000 
    select_valid_px = False # NOT USED

    save_freq = 100 # how often to save the checkpoint
    val_mesh_freq = 100 # how often to save the bathymetry
    report_freq = 1

    igr_weight = 0.01 # weight for the gradient loss
    variation_reg_weight = 0 # NOT USED
    bathy_weight = 5.0 #10.0 weight for the bathymetric loss (mainly from altimeter)
    intensity_weight = 500 #weight for the intensity loss 


    arc_n_samples = 20 # number of samples along the arc   
    select_px_method = "allbins" 
    num_select_pixels = 100 # NOT USED
    num_select_beams = 1 # Batch size
    px_sample_min_weight = 0.001# NOT USED
    randomize_points = True # NOT USED
    percent_select_true = 0.25 # NOT USED
}


mesh { 
    object_bbox_min = [-3.25, -11, -2.25]  # NOT USED
    object_bbox_max = [4, 8, 3] # NOT USED
    x_max = 584327, # max x coordinate of the map (Easting)
    x_min = 584227, # min x coordinate of the map (Easting)
    y_max = 4067923, # max y coordinate of the map (Northing)
    y_min = 4067823, # min y coordinate of the map (Northing)
    z_max = -547, #  max z coordinate of the map (Depth), rough estimate is enough, used for centering during training
    z_min = -552 # min z coordinate of the map (Depth),  rough estimate is enough, used for centering during training
    res = 0.1, # resolution of the map in meters
    level_set = 0
}

model {
    sdf_network {
        d_out = 65
        d_in = 2
        d_hidden = 64
        n_layers = 2 # for hashgrid  # 4 
        skip_in = [1] # NOT USED
        multires = 6 # NOT USED when using hashgrid
        bias = 0.5# this seems to be important
        scale = 0.02  # 2/(x_max - x_min) 
        geometric_init = True
        weight_norm = True
        encoding = "hashgrid_tcnn"#"hashgrid_tcnn"#"hashgrid"# "frequency"# "sphere_harmonics"
        degree=3 # NOT USED when using hashgrid
        desired_resolution=1024 # for hashgrid
        log2_hashmap_size=15 # size of the hash table
        level_init=4 # for progressive training
        steps_per_level=1500 # for progressive training, end_iter*1.5%
        down_weighting=False # if True, downweight the high-freq features in the hash encoding

    }

    variance_network {
        init_val = 3.0 # initial value for the variance, used to calculate the inv_s
        estimate_altimeter_bias=False  #if True, estimate the bias between the altimeter and the sonar
    }

    rendering_network {
        d_feature = 64
        mode = idr
        d_in = 9
        d_out = 1
        d_hidden = 64
        n_layers = 2 # for sphere_harmonics # 4
        weight_norm = True
        multires_view = 4 # NOT USED when using sphere harmonics encoding
        scale = 0.02 # 2/(x_max - x_min) 
        squeeze_out = True
        encoding = "sphere_harmonics_tcnn"#"sphere_harmonics"#"frequency"#sphere_harmonics
        degree=3
        estimate_beamform_azimuth=True  #if True, estimate the azimuth angle of the beam using beamform_azimuth_kernel_points kernels spread over the azimuth range
        beamform_azimuth_kernel_points=30
        estimate_beamform_elevation=True # if True, estimate the elevation angle of the beam using beamform_elevation_kernel_points kernels spread over the elevation range
        beamform_elevation_kernel_points=20
    }

    neus_renderer {
        n_samples = 30 # number of samples along the ray 
        n_importance = 30 # number of importance samples along the arc 
        n_outside = 0 # NOT USED 
        up_sample_steps = 2 # NOT USED   
        inv_s_up_sample = 0.5 # if n_importance > 0, initialize the inv_s used in upsampling 
        perturb = 0
        r_div = False 
        erf_factor = 40 

    }
}
